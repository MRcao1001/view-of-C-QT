#include "Interface.h"
//主界面

Interface::Interface(QWidget *parent)
    : QWidget(parent)
{
    //设置布局
    layout_interface();
    //建立信号和槽的连接
    my_connect();
    //实例化传感器对象
    new_sensor = new Sensor;
}

Interface::~Interface()
{
}

//界面布局函数--设置界面上控件的样式
void Interface::layout_interface()
{

    //实例化控件
    btn_start = new QPushButton;
    btn_start->setFixedSize(120,80);
    btn_start->setText("启动扫描");

    btn_stop = new QPushButton;
    btn_stop->setFixedSize(120,80);
    btn_stop->setText("渲染图像");
    btn_stop->setEnabled(false);

    btn_pause = new QPushButton;
    btn_pause->setFixedSize(120,80);
    btn_pause->setText("停止扫描");
    btn_pause->setEnabled(false);

    btn_save = new QPushButton;
    btn_save->setFixedSize(120,80);
    btn_save->setText("保存图像");

    btn_next = new QPushButton;
    btn_next->setFixedSize(120,80);
    btn_next->setText("查看数据");

    btn_last= new QPushButton;
    btn_last->setFixedSize(120,80);
    btn_last->setText("清除屏幕");

    display = new QLabel;
    display->setFixedSize(720, 680);
    display->setText(QString(" Welcome to use Gocator System\n Make sure that the sensor can start operation after it is online") );
    display->setFont(QFont("none", 14, 50));
    display->setAlignment(Qt::AlignTop);
    display->setStyleSheet("border:none; background:#000000; color:#ffffff; padding:20px");

    list = new QLabel;
    list->setFixedSize(250,850);
    list->setText("获取到的测量数据\n");
    list->setFont(QFont("none", 12, 50));
    list->setAlignment(Qt::AlignTop | Qt::AlignRight);
    list->setStyleSheet("padding:10px");
    pix = QPixmap(720,480);
    pix.fill(Qt::black);
    //实例化布局工具
    main_area = new QVBoxLayout;
    buttons = new QHBoxLayout;
    display_area =new QHBoxLayout;
    btn_area_top = new QHBoxLayout;
    btn_area_bottom = new QHBoxLayout;
    btn_area_last = new QHBoxLayout;
    btn_area_start = new QHBoxLayout;
    btn_area_pause = new QHBoxLayout;
    btn_area_stop = new QHBoxLayout;
    btn_area_next = new QHBoxLayout;
    btn_area_save = new QHBoxLayout;
    _main = new QHBoxLayout;
    //设置布局
    display_area->addWidget(display);
    display_area->setMargin(0);
    display_area->setSpacing(0);


    buttons->addWidget(btn_start);
    buttons->addWidget(btn_pause);
    buttons->addWidget(btn_next);
    buttons->addWidget(btn_last);
    buttons->addWidget(btn_stop);
    buttons->addWidget(btn_save);
    buttons->setSpacing(0);

    main_area->addLayout(display_area);
    main_area->addStretch();
    main_area->addLayout(buttons);
    main_area->addStretch();
    main_area->setMargin(0);
    main_area->setSpacing(0);
    _main->addLayout(main_area);
    _main->addWidget(list);
    _main->setMargin(0);
    _main->setSpacing(0);
    this->setLayout(_main);
    this->setFixedSize(970,760);
}

//按钮和槽函数绑定函数
void Interface::my_connect()
{
    connect(this->btn_start, &QPushButton::clicked, this, &Interface::start_scan_btn_click);
    connect(this->btn_stop, &QPushButton::clicked, this, &Interface::pause_scan_btn_click);
    connect(this->btn_pause, &QPushButton::clicked, this, &Interface::stop_scan_btn_click);
    connect(this->btn_next, &QPushButton::clicked, this, &Interface::next_pic_btn_click);
    connect(this->btn_last, &QPushButton::clicked, this, &Interface::last_pic_btn_click);
    connect(this->btn_save, &QPushButton::clicked, this, &Interface::save_pic_btn_click);

    //    connect(md, onData_ok_is_true(), this, )
}

//调用显示类
void Interface::drawPic()
{
    qDebug()<<"start drawing";

//    dp = new Display(this, 1);
//    gw = new glWindow;
//    this->display->hide();
//    display_area->addWidget(gw);
//    //绘制同步方式获取点的图像
//    //    dp = new Display(this, new_sensor->surfaceBuffer, new_sensor->buffer_length, new_sensor->buffer_width);
//    dp = new Display(this, 1);
//    //绘制异步方式获取点的图像

//    dp->my_draw();
    //隐藏当前界面元素
//    this->display->hide();
    //显示创建的新元素

//    display_area->addWidget(dp);


//    action();
    showHalcon();


}

void Interface::action()
{
      //Image Acquisition 01: Code generated by Image Acquisition 01
      OpenFramegrabber("GenICamTL", 0, 0, 0, 0, 0, 0, "progressive", 16, "rgb", -1, "false",
          "default", "127.0.0.1", 0, -1, &hv_AcqHandle);
      GrabImageStart(hv_AcqHandle, -1);
      GrabImageAsync(&ho_Image, hv_AcqHandle, -1);
      //Image Acquisition 01: Do something
//      SetWindowAttr("background", "black");
      Hlong winID = (Hlong) this->winId();
      double x_offset = _pointsVector_intensity.at(0).at(0).x;
      double y_offset = _pointsVector_intensity.at(0).at(0).y;
      _x = (_pointsVector_intensity[_vectorLength_intensity-1][_vectorWidth_intensity-1].x-x_offset)*3;
      _y = (_pointsVector_intensity[_vectorLength_intensity-1][_vectorWidth_intensity-1].y-y_offset)*3;
      OpenWindow(0,0,_x,_y,winID,"","",&hv_WindowID);
      HDevWindowStack::Push(hv_WindowID);
      if(HDevWindowStack::IsOpen())
          DispObj(ho_Image, HDevWindowStack::GetActive());
      CloseFramegrabber(hv_AcqHandle);
}

void Interface::showHalcon()
{
    int ret = 0;
    try
    {
#if defined(_WIN32)
        SetSystem("use_window_thread", "true");
#elif defined(__linux__) && !defined(__arm__)
        XInitThreads();
#endif

        // Default settings used in HDevelop (can be omitted)
        SetSystem("width", 512);
        SetSystem("height", 512);

#ifndef __APPLE__
        action();
        qDebug()<<"action ok";

#else
        ret = apple_main(argc,argv);
#endif
    }
    catch (HException &exception)
    {
        fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
                (const char *)exception.ProcName(),
                (const char *)exception.ErrorMessage());
        ret = 1;
    }
    qDebug()<<ret;
}



//开始按钮响应函数
void Interface::start_scan_btn_click()
{

    //显示dialog
    md= new my_Dailog(this);
    connect(md, SIGNAL(onData_ok_is_true()), this, SLOT(next_pic_btn_click()));
    md->setWindowFlags(Qt::WindowCloseButtonHint | Qt::Dialog);
    md->setWindowModality(Qt::ApplicationModal);
    md->move(730,150);
    md->show();
    //点击启动按钮，建立和传感器的连接并且启动传感器
    qDebug()<<"启动传感器中...";
    /********************************************************************************************/
    // 异步获取数据方式连接---->值存储到全局变量内
    kStatus rec_asy = new_sensor->InitSensor_asynchronous();
    if(rec_asy == kERROR){
        qDebug()<<"can not start sensor, please make sure that the sensor is online and try agian";
        Erroneous = true;
        return;
    }
    //测试数据，判断全局变量是否获取到数据
    btn_start->setEnabled(false);
    btn_pause->setEnabled(true);
    /********************************************************************************************/
}

//显示按钮响应函数
void Interface::pause_scan_btn_click()
{
    qDebug()<<"显示";
//    if(!onData_ok){
//        qDebug()<<"暂时没有数据";
//        QMessageBox::warning(NULL,QStringLiteral("TIPS"),QStringLiteral("there is none data"));
//        return;
//    }
    drawPic();
    //    btn_stop->setEnabled(false);
//    this->display->hide();
}

//终止按钮响应函数
void Interface::stop_scan_btn_click()
{
    qDebug()<<"停止";
    //    new_sensor->destroySensor(0);
    new_sensor->destroySensor(1);
    print_string = "正在初始化传感器\n";
    onData_ok = false;
    btn_start->setEnabled(true);
    btn_stop->setEnabled(true);
    btn_pause->setEnabled(false);

}

//刷新数据按钮响应函数
void Interface::next_pic_btn_click()
{

    QString info="获取到的测量数据\n";
    QString info_t="\t有效数据:\n";
    for(int i=0 ; i<10; i++){
        info += "\t ID: ";
        info += QString::number(i, 'f', 0);
        info += "\tdata: ";
        info += QString::number(measurement_vec[i], 'f', 10);
        info += "\n";
        if(measurement_vec[i] >0.0000001 || measurement_vec[i]< -0.00000001){
            info_t += "\t ID: ";
            info_t += QString::number(i, 'f', 0);
            info_t += "\tdata: ";
            info_t += QString::number(measurement_vec[i], 'f', 10);
            info_t += "\n";
        }
    }
    list->setText(info);
    this->repaint();
}

//清屏按钮响应函数
void Interface::last_pic_btn_click()
{
    int rec = QMessageBox::question(NULL,
                         QStringLiteral("Attention"),
                         QStringLiteral("This button clears the image and image metadata. Do you confirm the continuation?"),
                         QMessageBox::Yes | QMessageBox::No, QMessageBox::No);

    if(QMessageBox::Yes == rec){
        if (dp != NULL){
            display_area->removeWidget(dp);
            dp=nullptr;
            display->show();
            btn_last->setEnabled(false);
        }
        _pointsVector.resize(0);
        _pointsVector_intensity.resize(0);
        _pointsVector_uniform.resize(0);
        QMessageBox::warning(NULL,QStringLiteral("TIPS"),QStringLiteral("clear successfuly"));
        qDebug()<<"成功清空容器";
    }
    else {
        return;
    }

}

//保存图片响应函数
void Interface::save_pic_btn_click()
{
    QString fileName = QFileDialog::getSaveFileName(this,
                                                    tr("save image"),
                                                    "",
                                                    tr("*png file (*.png)"));

    if (!fileName.isNull())
    {
        //fileName是文件名
        if(dp){
            dp->pixmap->save(fileName);
        }
        else{
            QMessageBox::critical(NULL,
                                  QStringLiteral("ERROR"),
                                  QStringLiteral("Before you save the image, you must render it"),
                                  QMessageBox::Yes);
        }
    }
    else
    {
        //点的是取消
    }
}


